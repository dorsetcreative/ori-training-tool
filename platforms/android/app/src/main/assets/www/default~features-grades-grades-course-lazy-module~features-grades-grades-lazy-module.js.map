{"version":3,"sources":["./src/core/features/grades/pages/course/course.html","./src/core/features/grades/pages/course/course.module.ts","./src/core/features/grades/pages/course/course.page.ts","./src/core/features/grades/pages/course/course.scss"],"names":[],"mappings":"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","file":"default~features-grades-grades-course-lazy-module~features-grades-grades-lazy-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'core.grades.grades' | translate }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <core-split-view [mode]=\\\"splitViewMode\\\">\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!grades.loaded\\\" (ionRefresh)=\\\"refreshGrades($event.target)\\\">\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n        </ion-refresher>\\n        <core-loading [hideUntil]=\\\"grades.loaded\\\" class=\\\"safe-area-page\\\">\\n            <core-empty-box *ngIf=\\\"grades.empty\\\" icon=\\\"fas-chart-bar\\\" [message]=\\\"'core.grades.nogradesreturned' | translate\\\">\\n            </core-empty-box>\\n            <div *ngIf=\\\"!grades.empty\\\" class=\\\"core-grades-container\\\">\\n                <table cellspacing=\\\"0\\\" cellpadding=\\\"0\\\" class=\\\"core-grades-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th\\n                                *ngFor=\\\"let column of grades.columns\\\"\\n                                id=\\\"{{column.name}}\\\"\\n                                class=\\\"ion-text-start\\\"\\n                                [class.ion-hide-md-down]=\\\"column.hiddenPhone\\\"\\n                                [attr.colspan]=\\\"column.colspan\\\"\\n                            >\\n                                {{ 'core.grades.' + column.name | translate }}\\n                            </th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr\\n                            *ngFor=\\\"let row of grades.rows\\\"\\n                            role=\\\"button row\\\"\\n                            [attr.tabindex]=\\\"row.itemtype != 'category' ? 0 : null\\\"\\n                            (ariaButtonClick)=\\\"row.itemtype != 'category' && grades.select(row)\\\"\\n                            [class]=\\\"row.rowclass\\\"\\n                            [ngClass]='{\\\"core-grades-grade-clickable\\\": row.itemtype != \\\"category\\\"}'\\n                        >\\n                            <ng-container *ngIf=\\\"row.itemtype\\\">\\n                                <td\\n                                    *ngIf=\\\"row.itemtype == 'category'\\\"\\n                                    class=\\\"core-grades-table-category\\\"\\n                                    [attr.rowspan]=\\\"row.rowspan\\\"\\n                                ></td>\\n                                <th\\n                                    class=\\\"core-grades-table-gradeitem ion-text-start\\\"\\n                                    [class.column-itemname]=\\\"row.itemtype == 'category'\\\"\\n                                    [attr.aria-current]=\\\"grades.getItemAriaCurrent(row)\\\"\\n                                    [attr.colspan]=\\\"row.colspan\\\"\\n                                >\\n                                    <ion-icon *ngIf=\\\"row.icon\\\" name=\\\"{{row.icon}}\\\" slot=\\\"start\\\" [attr.aria-label]=\\\"row.iconAlt\\\">\\n                                    </ion-icon>\\n                                    <img *ngIf=\\\"row.image\\\" [src]=\\\"row.image\\\" slot=\\\"start\\\" class=\\\"core-module-icon\\\"\\n                                        [alt]=\\\"row.iconAlt\\\"/>\\n                                    <span [innerHTML]=\\\"row.gradeitem\\\"></span>\\n                                </th>\\n                                <ng-container *ngFor=\\\"let column of grades.columns\\\">\\n                                    <td\\n                                        *ngIf=\\\"column.name != 'gradeitem' && row[column.name] != undefined\\\"\\n                                        [class]=\\\"'ion-text-start core-grades-table-' + column.name\\\"\\n                                        [class.ion-hide-md-down]=\\\"column.hiddenPhone\\\"\\n                                        [innerHTML]=\\\"row[column.name]\\\"\\n                                    ></td>\\n                                </ng-container>\\n                            </ng-container>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </core-loading>\\n    </core-split-view>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\n\nimport { CoreSharedModule } from '@/core/shared.module';\n\nimport { CoreGradesCoursePage } from './course.page';\n\n@NgModule({\n    imports: [\n        CoreSharedModule,\n    ],\n    declarations: [\n        CoreGradesCoursePage,\n    ],\n})\nexport class CoreGradesCoursePageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\n\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreGrades } from '@features/grades/services/grades';\nimport {\n    CoreGradesFormattedTable,\n    CoreGradesFormattedTableColumn,\n    CoreGradesFormattedTableRow,\n    CoreGradesHelper,\n} from '@features/grades/services/grades-helper';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreSplitViewComponent, CoreSplitViewMode } from '@components/split-view/split-view';\nimport { CorePageItemsListManager } from '@classes/page-items-list-manager';\nimport { CoreNavigator } from '@services/navigator';\n\n/**\n * Page that displays a course grades.\n */\n@Component({\n    selector: 'page-core-grades-course',\n    templateUrl: 'course.html',\n    styleUrls: ['course.scss'],\n})\nexport class CoreGradesCoursePage implements AfterViewInit, OnDestroy {\n\n    grades: CoreGradesCourseManager;\n    splitViewMode?: CoreSplitViewMode;\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    constructor(protected route: ActivatedRoute) {\n        const courseId = CoreNavigator.getRouteNumberParam('courseId', { route })!;\n        const userId = CoreNavigator.getRouteNumberParam('userId', { route }) ?? CoreSites.getCurrentSiteUserId();\n        const useSplitView = route.snapshot.data.useSplitView ?? true;\n        const outsideGradesTab = route.snapshot.data.outsideGradesTab ?? false;\n\n        this.splitViewMode = useSplitView ? undefined : CoreSplitViewMode.MENU_ONLY;\n        this.grades = new CoreGradesCourseManager(CoreGradesCoursePage, courseId, userId, outsideGradesTab);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        await this.fetchInitialGrades();\n\n        this.grades.start(this.splitView);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.grades.destroy();\n    }\n\n    /**\n     * Refresh grades.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshGrades(refresher: IonRefresher): Promise<void> {\n        const { courseId, userId } = this.grades;\n\n        await CoreUtils.ignoreErrors(CoreGrades.invalidateCourseGradesData(courseId, userId));\n        await CoreUtils.ignoreErrors(this.fetchGrades());\n\n        refresher?.complete();\n    }\n\n    /**\n     * Obtain the initial table of grades.\n     */\n    private async fetchInitialGrades(): Promise<void> {\n        try {\n            await this.fetchGrades();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error loading course');\n\n            this.grades.setTable({ columns: [], rows: [] });\n        }\n    }\n\n    /**\n     * Update the table of grades.\n     */\n    private async fetchGrades(): Promise<void> {\n        const table = await CoreGrades.getCourseGradesTable(this.grades.courseId!, this.grades.userId);\n        const formattedTable = await CoreGradesHelper.formatGradesTable(table);\n\n        this.grades.setTable(formattedTable);\n    }\n\n}\n\n/**\n * Helper to manage the table of grades.\n */\nclass CoreGradesCourseManager extends CorePageItemsListManager<CoreGradesFormattedTableRowFilled> {\n\n    courseId: number;\n    userId: number;\n    columns?: CoreGradesFormattedTableColumn[];\n    rows?: CoreGradesFormattedTableRow[];\n\n    private outsideGradesTab: boolean;\n\n    constructor(pageComponent: unknown, courseId: number, userId: number, outsideGradesTab: boolean) {\n        super(pageComponent);\n\n        this.courseId = courseId;\n        this.userId = userId;\n        this.outsideGradesTab = outsideGradesTab;\n    }\n\n    /**\n     * Set grades table.\n     *\n     * @param table Grades table.\n     */\n    setTable(table: CoreGradesFormattedTable): void {\n        this.columns = table.columns;\n        this.rows = table.rows;\n\n        this.setItems(table.rows.filter(this.isFilledRow));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async select(row: CoreGradesFormattedTableRowFilled): Promise<void> {\n        if (this.outsideGradesTab) {\n            await CoreNavigator.navigateToSitePath(`/grades/${this.courseId}/${row.id}`);\n\n            return;\n        }\n\n        return super.select(row);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getDefaultItem(): CoreGradesFormattedTableRowFilled | null {\n        return null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getItemPath(row: CoreGradesFormattedTableRowFilled): string {\n        return row.id.toString();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getItemQueryParams(): Params {\n        return { userId: this.userId };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async logActivity(): Promise<void> {\n        await CoreGrades.logCourseGradesView(this.courseId!, this.userId!);\n    }\n\n    /**\n     * Check whether the given row is filled or not.\n     *\n     * @param row Grades table row.\n     * @return Whether the given row is filled or not.\n     */\n    private isFilledRow(row: CoreGradesFormattedTableRow): row is CoreGradesFormattedTableRowFilled {\n        return 'id' in row;\n    }\n\n}\n\nexport type CoreGradesFormattedTableRowFilled = Omit<CoreGradesFormattedTableRow, 'id'> & {\n    id: number;\n};\n","export default \"/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here the different files you should import to use global variables.\\n */\\n/*\\n * App custom mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n */\\n/*\\n * Imported ionic mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n * Extracted from ionic.mixins.scss\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\\n */\\n/*\\n * App Custom App variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all custom app variables.\\n */\\n/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all global variables.\\n */\\n/**\\n * Layout Breakpoints\\n *\\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\\n */\\nion-header {\\n  background: var(--header-background);\\n  box-shadow: 0 3px 6px 0 var(--tab-bar-shadow);\\n}\\nion-header ion-toolbar {\\n  --background: var(--header-background);\\n  display: flex;\\n  align-items: center;\\n  margin-top: var(--ion-safe-area-top, 0);\\n  padding-top: 0 !important;\\n}\\nion-header ion-toolbar ion-title {\\n  line-height: 36px;\\n  font-size: 30px;\\n}\\nion-header ion-toolbar ion-title img {\\n  width: 100px;\\n}\\nion-header ion-toolbar ion-button {\\n  --color: var(--brand-color);\\n  --padding-start: 0;\\n  --padding-end: 0;\\n}\\nion-header ion-toolbar ion-button ion-icon {\\n  font-size: 26px;\\n}\\nion-header .green-line {\\n  height: 10px;\\n  background: linear-gradient(0.25turn, #257C2D 10%, #2AB135 30%);\\n}\\n:host {\\n  --header-background: var(--white);\\n  --odd-cell-background: var(--gray-lighter);\\n  --even-cell-background: var(--white);\\n  --odd-cell-hover: var(--gray-light);\\n  --even-cell-hover: var(--gray-lighter);\\n  --icon-color: #999999;\\n}\\n:host .odd {\\n  --cell-background: var(--odd-cell-background);\\n  --cell-hover: var(--odd-cell-hover);\\n}\\n:host .even {\\n  --cell-background: var(--even-cell-background);\\n  --cell-hover: var(--even-cell-hover);\\n}\\n:host-context(body.dark) {\\n  --header-background: var(--black);\\n  --odd-cell-background: var(--gray-darker);\\n  --even-cell-background: var(--black);\\n  --odd-cell-hover: var(--gray-dark);\\n  --even-cell-hover: var(--gray-darker);\\n  --icon-color: #eeeeee;\\n}\\n:host-context(ion-app.md) {\\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, .13))));\\n}\\n:host-context(ion-app.ios) {\\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, #c8c7cc)));\\n}\\n.core-grades-table {\\n  border-collapse: collapse;\\n  line-height: 20px;\\n  width: 100%;\\n  font-size: 16px;\\n  color: var(--ion-text-color);\\n}\\n.core-grades-table tr {\\n  border-bottom: 1px solid var(--border-color);\\n}\\n.core-grades-table th, .core-grades-table td {\\n  padding-right: 10px;\\n  padding-top: 10px;\\n  padding-bottom: 10px;\\n  vertical-align: top;\\n  white-space: normal;\\n  text-align: start;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  .core-grades-table th, .core-grades-table td {\\n    padding-right: unset;\\n    -webkit-padding-end: 10px;\\n    padding-inline-end: 10px;\\n  }\\n}\\n.core-grades-table thead th {\\n  vertical-align: bottom;\\n  font-weight: bold;\\n  background-color: var(--header-background);\\n}\\n.core-grades-table tbody th {\\n  font-weight: normal;\\n}\\n.core-grades-table #gradeitem {\\n  padding-left: 5px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  .core-grades-table #gradeitem {\\n    padding-left: unset;\\n    -webkit-padding-start: 5px;\\n    padding-inline-start: 5px;\\n  }\\n}\\n.core-grades-table .core-grades-table-gradeitem {\\n  padding-left: 5px;\\n  font-weight: bold;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  .core-grades-table .core-grades-table-gradeitem {\\n    padding-left: unset;\\n    -webkit-padding-start: 5px;\\n    padding-inline-start: 5px;\\n  }\\n}\\n.core-grades-table .core-grades-table-gradeitem.column-itemname {\\n  padding-left: 0;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  .core-grades-table .core-grades-table-gradeitem.column-itemname {\\n    padding-left: unset;\\n    -webkit-padding-start: 0;\\n    padding-inline-start: 0;\\n  }\\n}\\n.core-grades-table .core-grades-table-gradeitem img {\\n  width: 16px;\\n  height: 16px;\\n}\\n.core-grades-table .core-grades-table-gradeitem ion-icon {\\n  color: var(--icon-color);\\n}\\n.core-grades-table .core-grades-table-gradeitem span {\\n  margin-left: 5px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  .core-grades-table .core-grades-table-gradeitem span {\\n    margin-left: unset;\\n    -webkit-margin-start: 5px;\\n    margin-inline-start: 5px;\\n  }\\n}\\n.core-grades-table .core-grades-table-feedback {\\n  padding-left: 5px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  .core-grades-table .core-grades-table-feedback {\\n    padding-left: unset;\\n    -webkit-padding-start: 5px;\\n    padding-inline-start: 5px;\\n  }\\n}\\n.core-grades-table .core-grades-table-feedback .no-overflow {\\n  overflow: auto;\\n}\\n.core-grades-table .dimmed_text,\\n.core-grades-table .hidden {\\n  opacity: 0.7;\\n}\\n.core-grades-table .odd td, .core-grades-table .odd th, .core-grades-table .odd th[aria-current=page], .core-grades-table .even td, .core-grades-table .even th, .core-grades-table .even th[aria-current=page] {\\n  background-color: var(--cell-background);\\n}\\n.core-grades-table .core-grades-grade-clickable {\\n  cursor: pointer;\\n}\\n.core-grades-table .core-grades-grade-clickable:hover td, .core-grades-table .core-grades-grade-clickable:hover th, .core-grades-table .core-grades-grade-clickable:hover th[aria-current=page] {\\n  background-color: var(--cell-hover);\\n}\\ncore-split-view.nested .core-grades-table .ion-hide-md-down,\\ncore-split-view.menu-and-content .core-grades-table .ion-hide-md-down {\\n  display: none;\\n  opacity: 0;\\n}\\n@media (max-width: 767.98px) {\\n  .core-grades-table td {\\n    font-size: 0.85em;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";"],"sourceRoot":"webpack:///"}